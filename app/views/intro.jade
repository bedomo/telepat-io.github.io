extends layouts/_default
block content
  .text-center.padded(style="display:none")
    img.faded(src="/images/github.png" width=256 height=256)
    h1 Coming soon on Github
    form.form-inline(method="post" action="http://appscend.us2.list-manage.com/subscribe/post?u=de3298de9232b91872f2c5529&amp;id=2cf33c9443")
      div(style="position: absolute; left: -5000px;")
        input(type="text" name="b_de3298de9232b91872f2c5529_2cf33c9443" tabindex="-1" value="")
      .form-group
        input.form-control(type="email" id="header_email" name="EMAIL" placeholder="Your email address" required)
      .form-group
        button.btn.btn-default(type="submit" name="subscribe") Get notified

  .container-fluid
    .row
      .col-lg-3
        ul.sidebar-nav.second
          li
            a.alpha(href="#installation") Installation
            ul
              li
                a.alpha(href="#booting-up-docker") Booting up with Docker
              li
                a.alpha(href="#booting-up-manually") Starting things manually
          li
            a.beta(href="#creating-an-app") Creating an app
          li
            a.gamma(href="#js-example") Connecting the JS client
      #main-content.col-lg-9
        h1.section#installation Getting started with Telepat
        
        h3.section#booting-up-docker Booting up with Docker
        p
          | We provide official docker-compose recipes for running Telepat and its dependencies (Elasticsearch, Redis and Apache Kafka). The recipes are separated in two components, shared dependencies and the actual Telepat software. Once you have 
          a(href='https://docs.docker.com/installation/') docker
          |  and 
          a(href='https://docs.docker.com/compose/install/') docker-compose
          |  installed on your machine, here are the steps to get everything running:
        pre git clone https://github.com/telepat-io/telepat-docker-compose-files
          | cd telepat-docker-compose-files/shared
          | sudo docker-compose up
        p
          | This will start up all the infrastructure components. Also, you need to install a CLI that can help you with Telepat management tasks:
        pre npm install telepat-cli
        p After installing the CLI and booting up Elasticsearch, you need to configure it:
        pre telepat configure elasticsearch

        p  Next, you need to launch the Telepat API and all the other services:
        pre cd telepat-docker-compose-files/telepat
          | sudo docker-compose up
        p
          | Right now everything should be up and running. The API instance is available on the same IP as your docker client. If you're running the Docker instance locally, it's localhost. If you're running on a Mac with Docker Quickstart Terminal, you need to note the IP that's shown in the terminal window when launching.
        p
          | The default ports are 3000 for the API and 80 for the websocket service.
        h3.section#booting-up-manually Installing from source
        p The Telepat backend stack is made up of two components:
        ul
          li
            | The API (
            a(href='https://github.com/telepat-io/telepat-api') https://github.com/telepat-io/telepat-api
            | ). To start this, simply run <pre>./bin/www</pre> You can also set the PORT environment variable to make the API listen on a port different than the default 3000.
          li
            | The services (
            a(href='https://github.com/telepat-io/telepat-worker') https://github.com/telepat-io/telepat-worker
            | ). To start, run <pre>node index.js -t topic_name -i worker_index</pre>
            p For built-in services, these are the commands to start up:
            ul
              li node telepat-worker/index.js -t aggregation -i 0 
              li node telepat-worker/index.js -t write -i 0 
              li node telepat-worker/index.js -t track -i 0 
              li node telepat-worker/index.js -t android_transport -i 0 
              li node telepat-worker/index.js -t ios_transport -i 0 
              li node telepat-worker/index.js -t sockets_transport -i 0 
        p Here are the environment vars that you can set:
          ul
            li TP_KFK_HOST: Kafka (zooekeeper) server
            li TP_KFK_PORT: Kafka (zooekeeper) server port
            li TP_KFK_CLIENT: Name for the kafka client
            li TP_REDIS_HOST: Redis database server
            li TP_REDIS_PORT: Redis server port
            li TP_MAIN_DB: Name of the main database which to use. Should be the same as the exported variable in telepat-models
            li TP_ES_HOST: Elasticsearch server (if you are using the ES database adapter)
            li TP_ES_PORT: Elasticsearch server port (if you are using the ES database adapter)

        h1.section#creating-an-app Creating an app
        p
          | After bootup, you need to create a new administration user account - Telepat CLI can help you setup your new app in no time. Here are the steps you need to take to create a new app:
          ul
            li Register a new admin:
              pre telepat add admin --email EMAIL --password PASSWORD
            li Create the app:
              pre telepat add app --name APP_NAME --apiKey API_KEY
            li Create at least one context (as a container for your objects):
              pre telepat add context --contextName CONTEXT_NAME
            li Create a schema file, and feed it into your app, so Telepat knows the types of objects you'll be working with. You need to have a schema that defines at the very least the types of objects; you can optionally also add information about object parameter names or relationships.
              pre telepat set schema --filename PATH_TO_SCHEMA_JSON --apiKey API_KEY

        h1.section#js-example Connecting the JS client
        p There's a Telepat example app that you can quickly run to test out your deployment. To do that, you need to clone the JavaScript client repository:
        pre git clone https://github.com/telepat-io/telepat-js.git
        p Then you need to install all dependencies, so run:
        pre npm install
        p Now let's configure the connection to the local instance of Telepat. Go to example/script.js and edit your connect options:
        pre
          | var connectOptions = {
          |  apiKey: 'APIKEY',
          |  appId: 'APPID',
          |  apiEndpoint: 'http://localhost:3000',
          |  socketEndpoint: 'http://localhost',
          |  timerInterval: 150
          |};
        p The apiEndpoint and socketEndpoint are probably fine if you're running Telepat locally (unless you're running in Docker on a Mac, you need to use the Docker IP), so you need to enter the API key and app ID you set up earlier.
        p All you need to do next is run the example:
        pre gulp serve
        p Then navigate to /example in the tab that gets opened in your browser. That's it! You've successfully deployed your first Telepat instance.
block scripts
  script(src="scripts/intro.js")
  script(src="scripts/menu-highlight.js")